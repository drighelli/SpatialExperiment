% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SpatialExperiment-methods.R, R/imgData.R
\name{SpatialExperiment-methods}
\alias{SpatialExperiment-methods}
\alias{spatialData}
\alias{spatialData<-}
\alias{spatialCoords}
\alias{spatialCoordsNames}
\alias{spatialCoordsNames<-}
\alias{scaleFactors}
\alias{inTissue}
\alias{spatialDataNames}
\alias{imgData}
\alias{imgData<-}
\alias{spatialData,SpatialExperiment-method}
\alias{spatialData<-,SpatialExperiment,ANY-method}
\alias{spatialData<-,SpatialExperiment,NULL-method}
\alias{spatialDataNames,SpatialExperiment-method}
\alias{spatialCoords,SpatialExperiment-method}
\alias{spatialCoordsNames,SpatialExperiment-method}
\alias{spatialCoordsNames<-,SpatialExperiment,character-method}
\alias{scaleFactors,SpatialExperiment-method}
\alias{inTissue,SpatialExperiment-method}
\alias{imgData,SpatialExperiment-method}
\alias{imgData<-,SpatialExperiment,DataFrame-method}
\alias{imgData<-,SpatialExperiment,NULL-method}
\title{SpatialExperiment Methods}
\usage{
\S4method{spatialData}{SpatialExperiment}(x, cd_bind = NULL, sample_id = TRUE, as_df = TRUE)

\S4method{spatialData}{SpatialExperiment,ANY}(x) <- value

\S4method{spatialData}{SpatialExperiment,`NULL`}(x) <- value

\S4method{spatialDataNames}{SpatialExperiment}(x)

\S4method{spatialCoords}{SpatialExperiment}(x, sample_id = TRUE, as_df = FALSE)

\S4method{spatialCoordsNames}{SpatialExperiment}(x)

\S4method{spatialCoordsNames}{SpatialExperiment,character}(x) <- value

\S4method{scaleFactors}{SpatialExperiment}(x, sample_id = TRUE, image_id = TRUE)

\S4method{inTissue}{SpatialExperiment}(x, sample_id = TRUE)

\S4method{imgData}{SpatialExperiment}(x)

\S4method{imgData}{SpatialExperiment,DataFrame}(x) <- value

\S4method{imgData}{SpatialExperiment,`NULL`}(x) <- value
}
\arguments{
\item{x}{a SpatialExperiment class object}

\item{cd_bind}{a character vector indicating additional columns to return 
that can be retrieved from the \code{colData} structure. If this is TRUE all
the colData are binded to the spatialData.}

\item{sample_id}{character string specifying sample 
identifier(s); \code{TRUE} is equivalent to all samples.}

\item{as_df}{logical indicating if the returned structure has to be a 
data.frame (default is FALSE).}

\item{value}{it varies depending on the invoked method see methods details.}

\item{image_id}{character string indicating the image identifiers(s), 
\code{TRUE} is equivalent to all images.}
}
\value{
see methods details.
}
\description{
The SpatialExperiment class provides a family of getter/setter methods 
to get/replace the spatial data attributes.
It is always suggested to use these accessors to facilitate future maintenance
of the code.
We distinguish the spatial data from the spatial coordinates as described in 
this paragraph.
With spatial data we refer to the general data structure containing the 
spatial coordinates, while we refer for spatial coordinates only to the 
specific spatial coordinates columns (as x, y, z, ...).
}
\section{spatialData Methods}{

All the methods described in this section takes as input the \code{sample_id}
argument.
See the parameter description for additional information.
\describe{
\item{\code{spatialData(x) <- value}:}{ The spatialData setter expects a 
data.frame/DataFrame object named with the
previously defined colnames for the spatial coordinates.
It is possible to get/set the spatial coordinates names with the 
spatialCoordsNames getter/setter, by default they are set by the 
SpatialExperiment constructor to c("x", "y").
If the input spatial data structure doesn't contain an in_tissue column, 
a default in_tissue column is set to 1.
If NULL is passed as value the all the related data structures are set 
accordingly.}
\item{\code{spatialData(x)}:}{ The spatialData getter gives the possibility 
to retrieve also additional columns from the
colData structure by the aid of the \code{cd_bind} argument.
It returns be default a DataFrame, but it is possible to retrieve a 
data.frame by setting \code{as_df=TRUE}.}
\item{\code{spatialCoords(x)}:}{ The \code{spatialCoords} getter returns the 
spatial coordinates in a matrix-like form, but it is possible to retrieve 
them in a data.frame form by setting \code{as_df=TRUE}.}
}
}

\section{spatialNames Methods}{

\describe{
\item{\code{spatialDataNames(x)}:}{ Returns the names of the spatialData 
structure.}
\item{\code{spatialCoordsNames(x)<-value}:}{ Sets the names of the spatial 
coordinates accordingly with the assigned value.}
\item{\code{spatialCoordsNames(x)}:}{ Returns the stored names of the spatial 
coordinates.}
}
}

\section{imgData Methods}{

\describe{
\item{\code{imgData(x)<-value}:}{ This setter allows to set a DataFrame 
object as imgData of the SpatialExperiment object class.}
\item{\code{imgData(x)}:}{ This getter returns the imgData DataFrame.}
}
}

\section{Other Methods}{

\describe{
\item{\code{scaleFactors(x, sample_id, image_id)}:}{ This getter returns 
the scale factors associated to the \code{sample_id}(s) 
and \code{image_id}(s) passed as input.
This is related to the stored image(s) into the SpatialExperiment.
\code{imgData} structure.
See the \code{sample_id} and \code{image_id} section description for further 
details.}
\item{\code{inTissue(x, sample_id)}:}{ This getter return a TRUE/FALSE mask
associated to the samples that are on a tissue.
This is typical related to 10x Visium experiments.
See the \code{sample_id} section description for further details.}
}
}

\examples{
example(SpatialExperiment)
## The spatialData methods
fakeSpData <- spatialData(se)
fakeSpData$array_col <- fakeSpData$array_row
spatialData(se) <- as.data.frame(fakeSpData)

# spatialData returns a DataFrame
head(spatialData(se))

# for combining spatialData with colData use cd_bind 
# use as_df for spatialData to return a data.frame 
head(spatialData(se, cd_bind="sample_id", as_df=TRUE))
 
# spatialCoords returns a matrix of coordinates
head(spatialCoords(se))

# changing spatial coordinates Names
spatialCoordsNames(se)
spatialCoordsNames(se) <- c("x","y")
spatialCoordsNames(se)
head(spatialData(se))

# imgData
imgData(se)

scaleFactors(se)

inTissue(se)
sum(inTissue(se))
se[inTissue(se),]
}
